//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.4.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package edu.unh.cs.cs619.bulletzone.rest;

import java.util.HashMap;
import android.content.Context;
import edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;
import edu.unh.cs.cs619.bulletzone.util.GridWrapper;
import edu.unh.cs.cs619.bulletzone.util.LongWrapper;
import org.androidannotations.rest.spring.api.RestErrorHandler;
import org.springframework.core.NestedRuntimeException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.client.RestTemplate;

public final class BulletZoneRestClient_
    implements BulletZoneRestClient
{
    private String rootUrl;
    private RestErrorHandler restErrorHandler;
    private RestTemplate restTemplate;

    public BulletZoneRestClient_(Context context) {
        rootUrl = "http://stman1.cs.unh.edu:6191/games";
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
    }

    @Override
    public void setRootUrl(String rootUrl) {
        this.rootUrl = rootUrl;
    }

    @Override
    public void setRestErrorHandler(RestErrorHandler arg0) {
        this.restErrorHandler = arg0;
    }

    @Override
    public GridWrapper grid() {
        try {
            return restTemplate.exchange(rootUrl.concat(""), HttpMethod.GET, null, GridWrapper.class).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public LongWrapper join() {
        try {
            LinkedMultiValueMap<String, Object> parameters = new LinkedMultiValueMap<String, Object>();
            HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<LinkedMultiValueMap<String, Object>>(parameters);
            return restTemplate.exchange(rootUrl.concat(""), HttpMethod.POST, requestEntity, LongWrapper.class).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public BooleanWrapper move(long tankId, byte direction) {
        try {
            LinkedMultiValueMap<String, Object> parameters = new LinkedMultiValueMap<String, Object>();
            HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<LinkedMultiValueMap<String, Object>>(parameters);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("tankId", tankId);
            urlVariables.put("direction", direction);
            return restTemplate.exchange(rootUrl.concat("/{tankId}/move/{direction}"), HttpMethod.PUT, requestEntity, BooleanWrapper.class, urlVariables).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public BooleanWrapper turn(long tankId, byte direction) {
        try {
            LinkedMultiValueMap<String, Object> parameters = new LinkedMultiValueMap<String, Object>();
            HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<LinkedMultiValueMap<String, Object>>(parameters);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("tankId", tankId);
            urlVariables.put("direction", direction);
            return restTemplate.exchange(rootUrl.concat("/{tankId}/turn/{direction}"), HttpMethod.PUT, requestEntity, BooleanWrapper.class, urlVariables).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public BooleanWrapper fire(long tankId, int bulletType) {
        try {
            LinkedMultiValueMap<String, Object> parameters = new LinkedMultiValueMap<String, Object>();
            HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<LinkedMultiValueMap<String, Object>>(parameters);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("bulletType", bulletType);
            urlVariables.put("tankId", tankId);
            return restTemplate.exchange(rootUrl.concat("/{tankId}/fire/{bulletType}"), HttpMethod.PUT, requestEntity, BooleanWrapper.class, urlVariables).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public BooleanWrapper leave(long tankId) {
        try {
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("tankId", tankId);
            return restTemplate.exchange(rootUrl.concat("/{tankId}/leave"), HttpMethod.DELETE, null, BooleanWrapper.class, urlVariables).getBody();
        } catch (final NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }
}
