//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.4.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package edu.unh.cs.cs619.bulletzone;

import android.app.Activity;
import android.content.Context;
import android.os.Build.VERSION;
import android.os.Build.VERSION_CODES;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import edu.unh.cs.cs619.bulletzone.events.BusProvider_;
import edu.unh.cs.cs619.bulletzone.rest.BZRestErrorhandler_;
import edu.unh.cs.cs619.bulletzone.rest.BulletZoneRestClient_;
import edu.unh.cs.cs619.bulletzone.rest.GridPollerTask;
import edu.unh.cs.cs619.bulletzone.rest.GridPollerTask_;
import edu.unh.cs.cs619.bulletzone.ui.GridAdapter_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ClientActivity_
    extends ClientActivity
    implements HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.activity_client);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        ClientActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((ClientActivity_.NonConfigurationInstancesHolder) super.getLastNonConfigurationInstance());
        if (nonConfigurationInstance!= null) {
            gridPollTask = nonConfigurationInstance.gridPollTask;
            ((GridPollerTask_) gridPollTask).rebind(this);
        }
        this.mGridAdapter = GridAdapter_.getInstance_(this);
        this.busProvider = BusProvider_.getInstance_(this);
        if (this.gridPollTask == null) {
            this.gridPollTask = GridPollerTask_.getInstance_(this);
        }
        if (this.gridPollTask == null) {
            this.gridPollTask = GridPollerTask_.getInstance_(this);
        }
        this.bzRestErrorhandler = BZRestErrorhandler_.getInstance_(this);
        this.restClient = new BulletZoneRestClient_(this);

        afterInject();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ClientActivity_.IntentBuilder_ intent(Context context) {
        return new ClientActivity_.IntentBuilder_(context);
    }

    public static ClientActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ClientActivity_.IntentBuilder_(fragment);
    }

    public static ClientActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ClientActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.gridView = hasViews.internalFindViewById(R.id.gridView);
        View view_buttonUp = hasViews.internalFindViewById(R.id.buttonUp);
        View view_buttonDown = hasViews.internalFindViewById(R.id.buttonDown);
        View view_buttonLeft = hasViews.internalFindViewById(R.id.buttonLeft);
        View view_buttonRight = hasViews.internalFindViewById(R.id.buttonRight);
        View view_buttonFire = hasViews.internalFindViewById(R.id.buttonFire);
        View view_buttonLeave = hasViews.internalFindViewById(R.id.buttonLeave);

        if (view_buttonUp!= null) {
            view_buttonUp.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.onButtonMove(view);
                }
            }
            );
        }
        if (view_buttonDown!= null) {
            view_buttonDown.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.onButtonMove(view);
                }
            }
            );
        }
        if (view_buttonLeft!= null) {
            view_buttonLeft.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.onButtonMove(view);
                }
            }
            );
        }
        if (view_buttonRight!= null) {
            view_buttonRight.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.onButtonMove(view);
                }
            }
            );
        }
        if (view_buttonFire!= null) {
            view_buttonFire.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.onButtonFire();
                }
            }
            );
        }
        if (view_buttonLeave!= null) {
            view_buttonLeave.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ClientActivity_.this.leaveGame();
                }
            }
            );
        }
        afterViewInjection();
    }

    @Override
    public Object getLastNonConfigurationInstance() {
        ClientActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((ClientActivity_.NonConfigurationInstancesHolder) super.getLastNonConfigurationInstance());
        if (nonConfigurationInstance == null) {
            return null;
        }
        return nonConfigurationInstance.superNonConfigurationInstance;
    }

    @Override
    public ClientActivity_.NonConfigurationInstancesHolder onRetainNonConfigurationInstance() {
        ClientActivity_.NonConfigurationInstancesHolder nonConfigurationInstanceState_ = new ClientActivity_.NonConfigurationInstancesHolder();
        nonConfigurationInstanceState_.superNonConfigurationInstance = super.onRetainNonConfigurationInstance();
        nonConfigurationInstanceState_.gridPollTask = gridPollTask;
        return nonConfigurationInstanceState_;
    }

    @Override
    void joinAsync() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.joinAsync();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    void moveAsync(final long tankId, final byte direction) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.moveAsync(tankId, direction);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    void turnAsync(final long tankId, final byte direction) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.turnAsync(tankId, direction);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    protected void onButtonFire() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.onButtonFire();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    void leaveGame() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.leaveGame();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    void leaveAsync(final long tankId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ClientActivity_.super.leaveAsync(tankId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ClientActivity_.IntentBuilder_>
    {
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ClientActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ClientActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            super(fragment.getActivity(), ClientActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
                        fragment_.startActivityForResult(intent, requestCode, lastOptions);
                    } else {
                        fragment_.startActivityForResult(intent, requestCode);
                    }
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
                            context.startActivity(intent, lastOptions);
                        } else {
                            context.startActivity(intent);
                        }
                    }
                }
            }
            return new PostActivityStarter(context);
        }
    }

    private static class NonConfigurationInstancesHolder {
        public GridPollerTask gridPollTask;
        public Object superNonConfigurationInstance;
    }
}
